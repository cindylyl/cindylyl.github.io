<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Django Database Performance Optimization</title>
      <link href="/2021/11/22/Django-Database-Performance-Optimization/"/>
      <url>/2021/11/22/Django-Database-Performance-Optimization/</url>
      
        <content type="html"><![CDATA[<p>As a project grows, our database size turns larger and we may experience longer waiting time when query an API.<br>Then it is time to make some performance optimizations. DB query is one of the items that causes performance reduction.</p><h2 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h2><p>The fisrt thing we need to do to address performance issues is profiling. We need to know what are the SQL queries we executes and<br>what how long does executing a query take.</p><h3 id="profiling-tools"><a href="#profiling-tools" class="headerlink" title="profiling tools"></a>profiling tools</h3><ul><li><a href="https://github.com/jazzband/django-silk" target="_blank" rel="noopener">silk</a>: It contains SQL Inspection and <a href="https://docs.python.org/3/library/profile.html?highlight=cprofile#module-cProfile" target="_blank" rel="noopener">cProfile</a>. On SQL Inspection part, it is easy for you to know what are the actual SQL you executes and which line of<br>code triggers the query.</li></ul><hr><h2 id="Retrieve-by-indexed-column"><a href="#Retrieve-by-indexed-column" class="headerlink" title="Retrieve by indexed column"></a>Retrieve by indexed column</h2><p>Try to use</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee.objects.filter(id__in=[id1, id2, ...])</span><br></pre></td></tr></table></figure><p>instead of</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee.objects.filter(name__in=[name1, name2, ...])</span><br></pre></td></tr></table></figure><hr><h2 id="Avoid-N-1-queries"><a href="#Avoid-N-1-queries" class="headerlink" title="Avoid N+1 queries"></a>Avoid N+1 queries</h2><p>N+1 queries are caused by retrieve foreign key or many to many key model properties. For each model instance, it will produce 1 extra query.<br>Therefore, if we have N model instances, then it will end up N + 1 queries.</p><h3 id="select-related-prefetch-related-Prefetch-object"><a href="#select-related-prefetch-related-Prefetch-object" class="headerlink" title="select_related(), prefetch_related(), Prefetch() object"></a><code>select_related()</code>, <code>prefetch_related()</code>, <code>Prefetch()</code> object</h3><p><code>select_related()</code> implements joins tables on database level, while <code>prefetch_related()</code> implements joins on Python code level.</p><p>Note that if you use <code>iterator()</code> to run the query, <code>prefetch_related()</code> calls will be ignored since these two optimizations do not make sense together.</p><p>Besides, for <code>prefetch_related()</code>, it needs to be noted that it only works for QuerySet <code>all()</code>, any subsequent chained methods which imply a different database query will ignore previously cached results, and retrieve data using a fresh database query.</p><p>For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pizzas = Pizza.objects.prefetch_related(&apos;toppings&apos;)</span><br><span class="line">&gt;&gt;&gt; [list(pizza.toppings.filter(spicy=True)) for pizza in pizzas]</span><br></pre></td></tr></table></figure><p>Here, <code>pizza.toppings.all()</code> is the cached result. <code>pizza.toppings.filter(spicy=True)</code> will produce a new query.</p><p>What if we need to pre-fetch from sub query set instead of all query set like above or control the queryset that order by a specific field? <code>Prefetch()</code> object can help.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spicy_toppings = Toppings.objects.filer(spicy=<span class="literal">True</span>)</span><br><span class="line">pizzas = Pizza.objects.prefetch_related(Prefetch(<span class="string">'toppings'</span>, queryset=spicy_toppings, to_attr=<span class="string">'spicy_toppings'</span>))</span><br></pre></td></tr></table></figure><p>Note that assign the prefetched result to a custom attribute with the optional <code>to_attr</code> argument. The result will be stored directly in a list and it can improve speed proformance.</p><h3 id="caching-cached-property-lru-cache"><a href="#caching-cached-property-lru-cache" class="headerlink" title="caching, @cached_property, @lru_cache()"></a>caching, @cached_property, @lru_cache()</h3><p>Retrieving data from cache is much faster than retrieving from database. One thing that needs to keep in mind is that when some data is updated/deleted/created from the database, we should modified tha related data from cache.</p><p>Django provides @cached_property decorator that allows to cache the result of a class method(without parameters) as a property.</p><p>When we wanna cache methods with parameters, we can use @lru_cache().</p><hr><h2 id="Only-retrieve-fields-you-need"><a href="#Only-retrieve-fields-you-need" class="headerlink" title="Only retrieve fields you need"></a>Only retrieve fields you need</h2><h3 id="Try-to-use-values-or-values-list"><a href="#Try-to-use-values-or-values-list" class="headerlink" title="Try to use values() or values_list()"></a>Try to use <code>values()</code> or <code>values_list()</code></h3><p>When you know you only need some specific fields, use <code>values()</code> or <code>values_list()</code>.</p><h2 id="Avoid-a-single-model-serializer-with-multi-layer-nested-serizlizers"><a href="#Avoid-a-single-model-serializer-with-multi-layer-nested-serizlizers" class="headerlink" title="Avoid a single model serializer with multi-layer nested serizlizers"></a>Avoid a single model serializer with multi-layer nested serizlizers</h2><p>Try to provide multiple serializers for a model to support different functionalities</p><ul><li><strong>ListSerializer</strong>: no more than one layer nested serializers (Remember to use select_related() and prefetch_related() on the queryset)</li><li><strong>ReadDetailSerializer</strong>: can have multi layer nested serializers (Remember to use select_related() and prefetch_related() on the queryset)</li><li><strong>WriteDetailSerializer</strong> (for creating or updating): no nested serializers</li></ul><p>Further reading list:<br><a href="https://docs.djangoproject.com/en/dev/topics/db/optimization/" target="_blank" rel="noopener">Django DB Optimation Docs</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python magic methods</title>
      <link href="/2019/11/10/Python-magic-methods/"/>
      <url>/2019/11/10/Python-magic-methods/</url>
      
        <content type="html"><![CDATA[<ul><li><code>__new__()</code> and <code>__init__()</code></li></ul><p><code>__new__()</code> is always called before <code>__init__()</code>.<br>Use <code>__new__</code> when you need to control the creation of a new instance.<br>Use <code>__init__</code> when you need to control initialization of a new instance.</p><p><code>__new__</code> is the first step of instance creation.  It’s called first,<br>and is responsible for returning a new instance of your class.  In<br>contrast, <code>__init__</code> doesn’t return anything; it’s only responsible for<br>initializing the instance after it’s been created.</p><p>In general, you shouldn’t need to override <code>__new__</code> unless you’re<br>subclassing an immutable type like str, int, unicode or tuple.</p><p><a href="https://stackoverflow.com/questions/674304/why-is-init-always-called-after-new" target="_blank" rel="noopener">link</a></p><ul><li><code>__getattr__()</code> and <code>__getattribute__()</code></li></ul><p>We usually use <code>obj.attributee</code> or <code>getattr(obj, field_name)</code> to get the attribute value of an object.</p><p>When a attribute <strong>doesn’t exist</strong> for a object, it will call <code>__getattr__()</code>, while <code>__getattribute__</code> is called whenever an attribute access occurs.<br>if <code>__getattribute__</code> fails, <code>__getattr__</code> is called.</p><p>If you need to catch every attribute regardless whether it exists or not, use <code>__getattribute__</code> instead. The difference is that <code>__getattr__</code> only gets called for attributes that don’t actually exist. If you set an attribute directly, referencing that attribute will retrieve it without calling <code>__getattr__</code>.</p><p><a href="https://stackoverflow.com/questions/4295678/understanding-the-difference-between-getattr-and-getattribute" target="_blank" rel="noopener">link</a></p><p>Example: when you wanna implement some logics like when the value of field1 is None, take the value of field2 of the object.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Unit Test</title>
      <link href="/2019/10/09/Django-Test/"/>
      <url>/2019/10/09/Django-Test/</url>
      
        <content type="html"><![CDATA[<h2 id="Why-unit-test"><a href="#Why-unit-test" class="headerlink" title="Why unit test?"></a>Why unit test?</h2><p>Tests can let us avoid breaking things when doing the refactoring.</p><hr><h2 id="Why-mocking"><a href="#Why-mocking" class="headerlink" title="Why mocking?"></a>Why mocking?</h2><p>We only care about the functionality of a single fuction. For other functions that are called within this function, that’s the responsibilities for other functions.</p><hr><h2 id="Mock-vs-MagicMock"><a href="#Mock-vs-MagicMock" class="headerlink" title="Mock vs MagicMock"></a>Mock vs MagicMock</h2><p>Both MagicMock and Mock allow you to mock a object. MagicMock is the subclass of Mock that provides some default implementaions for magic methods like <code>__iter__</code>, <code>__iter__</code>.</p><p>In this case, if you need to mock a object with a list as the attribute, then you need to use MagicMock.</p><ul><li>return_value</li></ul><p>This attribute set as a single fixed vaue. You get this fixed return value every time you call the mock object.</p><ul><li>side_effect</li></ul><p>This attribute usually set as a list of vaues, then every time the mock object is called, it will return one value from the list in sequence.</p><ul><li>patch</li></ul><p>patch() usually works as a decorator or context manager. Note that you patch where an object is <em>looked up</em>, which is <strong>not</strong> necessarily the same place as where it is defined.</p><hr><ul><li>factory boy (for mocking Django models or other ORM objects)</li></ul><p>allow to declare the test-specific fields (especially for foreignkey related fields). It is supper useful when you wanna mock some foreign key related fields and you don’t bother creating an instance for the foreign key related model. <strong>This class is ususlly used to test model related functionalities</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># no need to create an Author instance</span></span><br><span class="line">book = BookFactory(title=<span class="string">'Harry Potter'</span>, description=<span class="string">'xxx'</span>, author__name=<span class="string">'J.k Rowling'</span>)</span><br></pre></td></tr></table></figure><ul><li>Client (for mocking http request client, Django-rest-framework)</li></ul><p>This class acts like a “client” to make request to the server. It contains methods like <code>login()</code>, <code>get()</code>, <code>post()</code>, <code>patch()</code>, <code>delete()</code>. <strong>This class is ususlly used to test API related functionalities</strong>.</p><hr><p>TestCase:</p><ul><li>setUpData()</li></ul><p>this is a classmethod, it implementes only one time for the whole test class and provides public initial data for every test cases. Therefore, don’t execute some actions that affect the these public data like deletion.</p><ul><li>setUp()</li></ul><p>this is a instance method, it implements once before each test case. It is ok to execute deletion for the public data, since it is isolated for each test case and execute one time for each test case function.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-rest-framework View</title>
      <link href="/2019/09/15/Django-rest-framework-View/"/>
      <url>/2019/09/15/Django-rest-framework-View/</url>
      
        <content type="html"><![CDATA[<p>In most cases, we write view functions in <code>views.py</code>. However, we may write many duplicate codes such as <code>post_list = Post.objects.all()</code> and <code>post = get_object_or_404(Post, pk = pk)</code>. In order to solve this problem, Django provides us generic view class. There are two common class we can inherite. One is ListView, the other is DetailView.</p><h3 id="Class-based-view"><a href="#Class-based-view" class="headerlink" title="Class based view"></a>Class based view</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostView</span><span class="params">(ListView)</span>:</span></span><br><span class="line">    model = Post</span><br><span class="line">    template_name = <span class="string">'blog/index.html'</span></span><br><span class="line">    context_object_name = <span class="string">'post_list'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        cate = get_object_or_404(Category, pk=self.kwargs.get(<span class="string">'pk'</span>))</span><br><span class="line">        <span class="keyword">return</span> super(CategoryView, self).get_queryset().filter(category=cate)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostDetailView</span><span class="params">(DetailView)</span>:</span></span><br><span class="line">    model = Post</span><br><span class="line">    template_name = <span class="string">'blog/detail.html'</span></span><br><span class="line">    context_object_name = <span class="string">'post'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># rewrite get method to implemente extra functions</span></span><br><span class="line">        response = super(PostDetailView, self).get(request, *args, **kwargs)</span><br><span class="line">        self.object.increase_views()</span><br><span class="line">        <span class="comment"># return HttpResponse object</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># rewrite get_context_data method to return extra context data</span></span><br><span class="line">        context = super(PostDetailView, self).get_context_data(**kwargs)</span><br><span class="line">        form = CommentForm()</span><br><span class="line">        comment_list = self.object.comment_set.all()</span><br><span class="line">        context.update(&#123;</span><br><span class="line">            <span class="string">'form'</span>: form,</span><br><span class="line">            <span class="string">'comment_list'</span>: comment_list</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> context</span><br></pre></td></tr></table></figure><h3 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database transaction</title>
      <link href="/2019/08/29/Database-transaction/"/>
      <url>/2019/08/29/Database-transaction/</url>
      
        <content type="html"><![CDATA[<p>A database transaction is a series of SQL commands.</p><h2 id="Database-transaction-properties-ACID"><a href="#Database-transaction-properties-ACID" class="headerlink" title="Database transaction properties: ACID"></a>Database transaction properties: ACID</h2><h3 id="Atomicity"><a href="#Atomicity" class="headerlink" title="Atomicity"></a>Atomicity</h3><p>A transaction must be an atomatic unit of work; either all of SQL commands are performed, or none of them is performed.</p><h3 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h3><p>When completed a transaction, all data in the database must stay in a consistent state.</p><h3 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h3><p>Modifications made by concurrent transactions must be isolated from the modifications made by any other concurrent transactions.</p><h3 id="Durability"><a href="#Durability" class="headerlink" title="Durability"></a>Durability</h3><p>When completed a transaction, the modifications persist in the database permanently.</p><h2 id="4-categories-of-isolation-level"><a href="#4-categories-of-isolation-level" class="headerlink" title="4 categories of isolation level:"></a>4 categories of isolation level:</h2><ol><li>Read uncommitted</li></ol><p>Lock releases after modification. It avoids the lost update problem, but may produce Dirty Read, because it can read record that uncommitted and the records may rollback to the original ones.</p><ol start="2"><li>Read committed</li></ol><p>Lock releases after committing transaction. It can only read records that have already committed. It avoid dirty read but it may produce norepeatable read, which means it may return different results for two same query commands, because one query happened before committing and the other happened after committing.</p><ol start="3"><li>Repeatable read (MySQL default)</li></ol><p>It avoids norepeatable read because it returns same query results within the same transaction. However, it may produce phantom read.</p><ol><li>Serializable</li><li>low efficiency, but high safety</li></ol><p>References:<br><a href="https://technet.microsoft.com/en-us/library/ms190612(v=sql.105).aspx" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/library/ms190612(v=sql.105).aspx</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP Request/Response Process</title>
      <link href="/2019/08/29/HTTP-Request-Response-Process/"/>
      <url>/2019/08/29/HTTP-Request-Response-Process/</url>
      
        <content type="html"><![CDATA[<p>What happened after you enter a URL into the web browser? How does a complete HTTP request/response process look like?</p><h2 id="Step-1-Parsing-the-URL-to-a-IP-address"><a href="#Step-1-Parsing-the-URL-to-a-IP-address" class="headerlink" title="Step 1: Parsing the URL to a IP address"></a>Step 1: Parsing the URL to a IP address</h2><p>First of all, the url typed on the web browser will transfer into a IP address. How does the url map to the related IP address? The details are as follow.</p><p><img src="http://upload-images.jianshu.io/upload_images/1787733-0a3d52860a62ac77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alt-text"></p><ul><li><p>The browser firstly looks up IP address for related domain name in its browser cache. If the IP adress is found, it would return to the client. Otherwise, next</p></li><li><p>If the browser cache doesn’t contain the desired IP adress record, it would look up in the OS cache (hosts file).</p></li><li><p>If not found, it send a request to local DNS(Domain Name System) server.</p></li><li><p>If not found, a recursive search would happen. 1) Local DNS Server sends a request to Root DNS Server, and then return gTLD Server address (e.g. .com, .org, .cn etc). 2) Local DNS Server sends a request to gTLD Server returned previously and return the address of the Name Serverfor related domain name. 3) Local DNS Server sends a requst to Name Server and return IP address for the domain name. Finally, the Local DNS Server return IP address to client.</p></li></ul><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/500pxAn_example_of_theoretical_DNS_recursion_svg.png" alt="alt-text"></p><h2 id="Step-2-Sending-the-request-to-web-server"><a href="#Step-2-Sending-the-request-to-web-server" class="headerlink" title="Step 2: Sending the request to web server"></a>Step 2: Sending the request to web server</h2><p>After obtaining IP address, browser would form a HTTP request, and then send it to web server. Here is what a HTTP request look like.<br>We can obtain a mock HTTP request/response process by using cURL.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v www.google.com</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* Rebuilt URL to: www.google.com/</span><br><span class="line">*   Trying 24.226.16.25...</span><br><span class="line">* Connected to www.google.com (24.226.16.25) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: www.google.com</span><br><span class="line">&gt; User-Agent: curl/7.49.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 302 Found</span><br><span class="line">&lt; Cache-Control: private</span><br><span class="line">&lt; Content-Type: text/html; charset=UTF-8</span><br><span class="line">&lt; Referrer-Policy: no-referrer</span><br><span class="line">&lt; Location: http://www.google.ca/?gfe_rd=cr&amp;ei=5o0SWaqWMsSC8QfHmbDAAw</span><br><span class="line">&lt; Content-Length: 258</span><br><span class="line">&lt; Date: Wed, 10 May 2017 03:49:58 GMT</span><br><span class="line">&lt;</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;302 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=&quot;http://www.google.ca/?gfe_rd=cr&amp;amp;ei=5o0SWaqWMsSC8QfHmbDAAw&quot;&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line">* Connection #0 to host www.google.com left intact</span><br></pre></td></tr></table></figure><p>Lines start with “&gt;” are HTTP request and with “&lt;” are HTTP response (explain in next step).<br>A HTTP request consists of three parts. They are:</p><ol><li>Request Line (line 1)</li><li>Request Header (following a few lines)</li><li>A blank line (means the ending of a HTTP request)</li></ol><p>Request Line<br>format: HTTP-Method + Request-URI + HTTP-Version<br>common HTTP method: GET, POST, DELETE, PUT, PATCH<br>Differences between ‘GET’ and ‘POST’?</p><h2 id="Step-3-The-server-response"><a href="#Step-3-The-server-response" class="headerlink" title="Step 3: The server response"></a>Step 3: The server response</h2><p>A HTTP response consists of 4 parts. They are:</p><ol><li>Status Line (line 1)</li><li>Response Header (following a few lines)</li><li>A blank line (uses to seperate the response header and the HTML contents)</li><li>HTTP contents</li></ol><p>Status Line<br>format: HTTP-Version + Status-Code + Reason-Phrase<br>Response Code:</p><ul><li>1XX: provisional response</li><li>2XX: sucess (e.g. 200)</li><li>3XX: redirection</li><li>4XX: client error (e.g. 404)</li><li>5XX: server error</li></ul><h2 id="Steip-4-Browser-redering"><a href="#Steip-4-Browser-redering" class="headerlink" title="Steip 4: Browser redering"></a>Steip 4: Browser redering</h2><p><img src="http://growth.phodal.com/assets/article/chapter1/render-html.png" alt="alt-text"></p><p>For this step, the web browser would render HTTP contents obtained from HTTP response and may send request to web server for object embedded in HTML.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Indexing in MySQL Database</title>
      <link href="/2019/08/29/Indexing-in-MySQL-Database/"/>
      <url>/2019/08/29/Indexing-in-MySQL-Database/</url>
      
        <content type="html"><![CDATA[<p>In order to increase speed of searching a record in the database, we usually create indice. Actually, indexing is a kind of data structure.<br>For finding a specific element in a table, the common way is to search one by one. However, its time complexity is O(n). A wiser way is to use Binary Search Tree whose time complexity is O(log(n)). Sounds great? Here is the thing, index files store in external memory so swithching from one block (node) to another block is time comsuming. The more nodes a tree has, the more time it takes to deal with I/O operation for the disk. Our goal is to reduce the height of the tree(or the number of nodes), so that B-trees and B+ trees are decent choices. It is because multiple keys are able to store in one node, so the height of the tree drop down rapidly.</p><hr><p>B-tree and B+ tree</p><p>Both B-trees and B+ trees are a kind of balanced multi-way search tree.</p><p><img src="https://i.stack.imgur.com/l6UyF.png" alt="b-tree &amp; b+ tree"></p><p>b-tree &amp; b+ tree<br>Goodness for B+ trees</p><ul><li><p>B-trees store both key and data in each node (interal node and leaves), while B+ trees store only data in leaf node. This allows more number of nodes(/keys) to contain in a given size of block, which means it takes less number of times on I/O operation for disk (less switching between two blocks). In most cases, we have to access data that is on a leaf node so it costs less time on average.</p></li><li><p>The leaf nodes of a B+ treee are linked. Thus, it is easy to access a range of data that store in different nodes (e.g. range (5,12)). Furthermore, doing a full scan is much easier, since it goes through as a linear linked list. On the other hand, a B-tree has to traverse the tree to do so.</p></li></ul><p>Goodness for B-trees</p><ul><li>Seeking a particular data (near to the root) frequently can obtain the data faster. (You don’t need to reach the leaf node!)</li></ul><hr><p>InnoDB and MyISAM</p><p>In MySQL, B+ trees are used in both InnoDB (default) and MyISAM storage engine.</p><p><img src="http://jbcdn2.b0.upaiyun.com/2012/07/image11111.png" alt="MyISAM"></p><p>MyISAM</p><ul><li>For MyISAM, the physical address of each record is stored in the data field of each leaf node. It means that the index files and the data file are seperated. Here, col1 is the primary key and col2 is secondary key.</li><li>table-level locking<br><img src="http://jbcdn2.b0.upaiyun.com/2012/07/image111.png" alt="InnoDB"></li></ul><p>InnoDB</p><ul><li>Compared with MyISAM, 1) one big difference for InnoDB is that the data field in each leaf node stored the complete records rather than a physical address (clustered index). The key of the index tree(B+ tree) is the primary key of the table. Therefore, InnoDB requires a table must have primary. If there is no primary key, MySQL will chose from existing table or create automatically. 2) Another difference is that each data field of the secondary key stores the relative primary key rather than a physical address.</li><li>Since maintaing the B+ tree features (reblanceing) is time consuming so that is the reasons why we should use short incremental and numerical field as the primary key.</li><li>row-level locking</li></ul><p>To sum up:<br>Frequent reading, almost no writing =&gt; MyISAM<br>Full-text search in MySQL &lt;= 5.5 =&gt; MyISAM<br>In all other circumstances, InnoDB is usually the best way to go.</p><hr><p>Scheme Optimization</p><p>should create index for following columns(fields):</p><ul><li>primary key</li><li>foreign key (connect to other table constantly)</li><li>range searching</li><li>sort frequently</li><li>use where clause frequently</li></ul><p>should not create index for following columns:</p><ul><li>use rarely</li><li>low selectivity (low percentage of distinct data) (e.g. gender)</li></ul><p>prefex indexing</p><ul><li>It uses the prefex replace the whole column value as the index so it ensures the balance between selectivity and size of a field.</li></ul><p>Reference:</p><p><a href="http://stackoverflow.com/questions/870218/differences-between-b-trees-and-b-trees" target="_blank" rel="noopener">http://stackoverflow.com/questions/870218/differences-between-b-trees-and-b-trees</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/29/hello-world/"/>
      <url>/2019/08/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
