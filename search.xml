<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Database transaction</title>
      <link href="/2019/08/29/Database-transaction/"/>
      <url>/2019/08/29/Database-transaction/</url>
      
        <content type="html"><![CDATA[<p>A database transaction is a series of SQL commands.</p><h2 id="Database-transaction-properties-ACID"><a href="#Database-transaction-properties-ACID" class="headerlink" title="Database transaction properties: ACID"></a>Database transaction properties: ACID</h2><h3 id="Atomicity"><a href="#Atomicity" class="headerlink" title="Atomicity"></a>Atomicity</h3><p>A transaction must be an atomatic unit of work; either all of SQL commands are performed, or none of them is performed.</p><h3 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h3><p>When completed a transaction, all data in the database must stay in a consistent state.</p><h3 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h3><p>Modifications made by concurrent transactions must be isolated from the modifications made by any other concurrent transactions.</p><h3 id="Durability"><a href="#Durability" class="headerlink" title="Durability"></a>Durability</h3><p>When completed a transaction, the modifications persist in the database permanently.</p><h2 id="4-categories-of-isolation-level"><a href="#4-categories-of-isolation-level" class="headerlink" title="4 categories of isolation level:"></a>4 categories of isolation level:</h2><ol><li>Read uncommitted</li></ol><p>Lock releases after modification. It avoids the lost update problem, but may produce Dirty Read, because it can read record that uncommitted and the records may rollback to the original ones.</p><ol start="2"><li>Read committed</li></ol><p>Lock releases after committing transaction. It can only read records that have already committed. It avoid dirty read but it may produce norepeatable read, which means it may return different results for two same query commands, because one query happened before committing and the other happened after committing.</p><ol start="3"><li>Repeatable read (MySQL default)</li></ol><p>It avoids norepeatable read because it returns same query results within the same transaction. However, it may produce phantom read.</p><ol><li>Serializable</li><li>low efficiency, but high safety</li></ol><p>References:<br><a href="https://technet.microsoft.com/en-us/library/ms190612(v=sql.105).aspx" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/library/ms190612(v=sql.105).aspx</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP Request/Response Process</title>
      <link href="/2019/08/29/HTTP-Request-Response-Process/"/>
      <url>/2019/08/29/HTTP-Request-Response-Process/</url>
      
        <content type="html"><![CDATA[<p>What happened after you enter a URL into the web browser? How does a complete HTTP request/response process look like?</p><h2 id="Step-1-Parsing-the-URL-to-a-IP-address"><a href="#Step-1-Parsing-the-URL-to-a-IP-address" class="headerlink" title="Step 1: Parsing the URL to a IP address"></a>Step 1: Parsing the URL to a IP address</h2><p>First of all, the url typed on the web browser will transfer into a IP address. How does the url map to the related IP address? The details are as follow.</p><p><img src="http://upload-images.jianshu.io/upload_images/1787733-0a3d52860a62ac77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alt-text"></p><ul><li><p>The browser firstly looks up IP address for related domain name in its browser cache. If the IP adress is found, it would return to the client. Otherwise, next</p></li><li><p>If the browser cache doesn’t contain the desired IP adress record, it would look up in the OS cache (hosts file).</p></li><li><p>If not found, it send a request to local DNS(Domain Name System) server.</p></li><li><p>If not found, a recursive search would happen. 1) Local DNS Server sends a request to Root DNS Server, and then return gTLD Server address (e.g. .com, .org, .cn etc). 2) Local DNS Server sends a request to gTLD Server returned previously and return the address of the Name Serverfor related domain name. 3) Local DNS Server sends a requst to Name Server and return IP address for the domain name. Finally, the Local DNS Server return IP address to client.</p></li></ul><p><img src="http://igoro.com/wordpress/wp-content/uploads/2010/02/500pxAn_example_of_theoretical_DNS_recursion_svg.png" alt="alt-text"></p><h2 id="Step-2-Sending-the-request-to-web-server"><a href="#Step-2-Sending-the-request-to-web-server" class="headerlink" title="Step 2: Sending the request to web server"></a>Step 2: Sending the request to web server</h2><p>After obtaining IP address, browser would form a HTTP request, and then send it to web server. Here is what a HTTP request look like.<br>We can obtain a mock HTTP request/response process by using cURL.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v www.google.com</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* Rebuilt URL to: www.google.com/</span><br><span class="line">*   Trying 24.226.16.25...</span><br><span class="line">* Connected to www.google.com (24.226.16.25) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: www.google.com</span><br><span class="line">&gt; User-Agent: curl/7.49.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 302 Found</span><br><span class="line">&lt; Cache-Control: private</span><br><span class="line">&lt; Content-Type: text/html; charset=UTF-8</span><br><span class="line">&lt; Referrer-Policy: no-referrer</span><br><span class="line">&lt; Location: http://www.google.ca/?gfe_rd=cr&amp;ei=5o0SWaqWMsSC8QfHmbDAAw</span><br><span class="line">&lt; Content-Length: 258</span><br><span class="line">&lt; Date: Wed, 10 May 2017 03:49:58 GMT</span><br><span class="line">&lt;</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;302 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=&quot;http://www.google.ca/?gfe_rd=cr&amp;amp;ei=5o0SWaqWMsSC8QfHmbDAAw&quot;&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line">* Connection #0 to host www.google.com left intact</span><br></pre></td></tr></table></figure><p>Lines start with “&gt;” are HTTP request and with “&lt;” are HTTP response (explain in next step).<br>A HTTP request consists of three parts. They are:</p><ol><li>Request Line (line 1)</li><li>Request Header (following a few lines)</li><li>A blank line (means the ending of a HTTP request)</li></ol><p>Request Line<br>format: HTTP-Method + Request-URI + HTTP-Version<br>common HTTP method: GET, POST, DELETE, PUT, PATCH<br>Differences between ‘GET’ and ‘POST’?</p><h2 id="Step-3-The-server-response"><a href="#Step-3-The-server-response" class="headerlink" title="Step 3: The server response"></a>Step 3: The server response</h2><p>A HTTP response consists of 4 parts. They are:</p><ol><li>Status Line (line 1)</li><li>Response Header (following a few lines)</li><li>A blank line (uses to seperate the response header and the HTML contents)</li><li>HTTP contents</li></ol><p>Status Line<br>format: HTTP-Version + Status-Code + Reason-Phrase<br>Response Code:</p><ul><li>1XX: provisional response</li><li>2XX: sucess (e.g. 200)</li><li>3XX: redirection</li><li>4XX: client error (e.g. 404)</li><li>5XX: server error</li></ul><h2 id="Steip-4-Browser-redering"><a href="#Steip-4-Browser-redering" class="headerlink" title="Steip 4: Browser redering"></a>Steip 4: Browser redering</h2><p><img src="http://growth.phodal.com/assets/article/chapter1/render-html.png" alt="alt-text"></p><p>For this step, the web browser would render HTTP contents obtained from HTTP response and may send request to web server for object embedded in HTML.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Indexing in MySQL Database</title>
      <link href="/2019/08/29/Indexing-in-MySQL-Database/"/>
      <url>/2019/08/29/Indexing-in-MySQL-Database/</url>
      
        <content type="html"><![CDATA[<p>In order to increase speed of searching a record in the database, we usually create indice. Actually, indexing is a kind of data structure.<br>For finding a specific element in a table, the common way is to search one by one. However, its time complexity is O(n). A wiser way is to use Binary Search Tree whose time complexity is O(log(n)). Sounds great? Here is the thing, index files store in external memory so swithching from one block (node) to another block is time comsuming. The more nodes a tree has, the more time it takes to deal with I/O operation for the disk. Our goal is to reduce the height of the tree(or the number of nodes), so that B-trees and B+ trees are decent choices. It is because multiple keys are able to store in one node, so the height of the tree drop down rapidly.</p><hr><p>B-tree and B+ tree</p><p>Both B-trees and B+ trees are a kind of balanced multi-way search tree.</p><p><img src="https://i.stack.imgur.com/l6UyF.png" alt="b-tree &amp; b+ tree"></p><p>b-tree &amp; b+ tree<br>Goodness for B+ trees</p><ul><li><p>B-trees store both key and data in each node (interal node and leaves), while B+ trees store only data in leaf node. This allows more number of nodes(/keys) to contain in a given size of block, which means it takes less number of times on I/O operation for disk (less switching between two blocks). In most cases, we have to access data that is on a leaf node so it costs less time on average.</p></li><li><p>The leaf nodes of a B+ treee are linked. Thus, it is easy to access a range of data that store in different nodes (e.g. range (5,12)). Furthermore, doing a full scan is much easier, since it goes through as a linear linked list. On the other hand, a B-tree has to traverse the tree to do so.</p></li></ul><p>Goodness for B-trees</p><ul><li>Seeking a particular data (near to the root) frequently can obtain the data faster. (You don’t need to reach the leaf node!)</li></ul><hr><p>InnoDB and MyISAM</p><p>In MySQL, B+ trees are used in both InnoDB (default) and MyISAM storage engine.</p><p><img src="http://jbcdn2.b0.upaiyun.com/2012/07/image11111.png" alt="MyISAM"></p><p>MyISAM</p><ul><li>For MyISAM, the physical address of each record is stored in the data field of each leaf node. It means that the index files and the data file are seperated. Here, col1 is the primary key and col2 is secondary key.</li><li>table-level locking<br><img src="http://jbcdn2.b0.upaiyun.com/2012/07/image111.png" alt="InnoDB"></li></ul><p>InnoDB</p><ul><li>Compared with MyISAM, 1) one big difference for InnoDB is that the data field in each leaf node stored the complete records rather than a physical address (clustered index). The key of the index tree(B+ tree) is the primary key of the table. Therefore, InnoDB requires a table must have primary. If there is no primary key, MySQL will chose from existing table or create automatically. 2) Another difference is that each data field of the secondary key stores the relative primary key rather than a physical address.</li><li>Since maintaing the B+ tree features (reblanceing) is time consuming so that is the reasons why we should use short incremental and numerical field as the primary key.</li><li>row-level locking</li></ul><p>To sum up:<br>Frequent reading, almost no writing =&gt; MyISAM<br>Full-text search in MySQL &lt;= 5.5 =&gt; MyISAM<br>In all other circumstances, InnoDB is usually the best way to go.</p><hr><p>Scheme Optimization</p><p>should create index for following columns(fields):</p><ul><li>primary key</li><li>foreign key (connect to other table constantly)</li><li>range searching</li><li>sort frequently</li><li>use where clause frequently</li></ul><p>should not create index for following columns:</p><ul><li>use rarely</li><li>low selectivity (low percentage of distinct data) (e.g. gender)</li></ul><p>prefex indexing</p><ul><li>It uses the prefex replace the whole column value as the index so it ensures the balance between selectivity and size of a field.</li></ul><p>Reference:</p><p><a href="http://stackoverflow.com/questions/870218/differences-between-b-trees-and-b-trees" target="_blank" rel="noopener">http://stackoverflow.com/questions/870218/differences-between-b-trees-and-b-trees</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/29/hello-world/"/>
      <url>/2019/08/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
